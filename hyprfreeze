#!/usr/bin/env bash

function printHelp() {
	cat <<EOF
Usage: hyprfreeze (-a | -p <pid> | -n <name> | -r) [options]

Utility to suspend a game process (and other programs) in Hyprland.

Options:
  -h, --help            show help message

  -a, --active          toggle suspend by active window
  -p, --pid             toggle suspend by process id
  -n, --name            toggle suspend by process name/command
  -r, --prop            toggle suspend by clicking on window (hyprprop must be installed)

  -s, --silent          don't send notification
  -t, --notif-timeout   notification timeout in milliseconds (default 5000)
  --dry-run             doesn't actually suspend/resume a process
  --debug               enable debug mode
  --no-xorg-workaround  skip the XWayland mouse capture workaround (other XWayland windows may become non-interactable)
EOF
}

function debugPrint() {
  if [ "$DEBUG" -eq 1 ]; then
    echo "[DEBUG] $1"
  fi
}

function releaseMouseCapture() {
  # Skip if workaround is disabled
  if [[ $NO_XORG_WORKAROUND == "1" ]]; then
    debugPrint "XWayland workaround disabled, skipping mouse capture release"
    return 0
  fi
  
  debugPrint "Attempting to release mouse capture for XWayland..."
  
  # Get the active window info
  local active_win
  active_win=$(hyprctl activewindow -j)
  
  # Check if the window we're about to pause is XWayland
  local is_xwayland
  is_xwayland=$(echo "$active_win" | jq -r '.xwayland')
  debugPrint "Is XWayland window: $is_xwayland"
  
  # If it's an XWayland window, use workspace switching to release mouse capture
  if [[ "$is_xwayland" == "true" ]]; then
    debugPrint "XWayland window detected - using workspace switching to release mouse capture..."
    
    # Get the current workspace
    local current_ws=$(hyprctl activeworkspace -j | jq -r '.id')
    debugPrint "Current workspace: $current_ws"
    
    # Find another workspace to switch to briefly
    local other_workspace=$(hyprctl workspaces -j | jq -r '.[] | select(.id != '"$current_ws"') | .id' | head -1)
    
    if [ -n "$other_workspace" ]; then
      debugPrint "Switching to workspace $other_workspace and back to release mouse capture..."
      hyprctl dispatch workspace "$other_workspace"
      hyprctl dispatch workspace "$current_ws"
    else
      debugPrint "No other workspace found, cannot release mouse capture via workspace switching"
    fi
  fi
}

function toggleFreeze() {
  # Skip this function if --dry-run flag was provided
  if [[ $DRYRUN == "1" ]]; then return 0; fi

  # Get pids of process tree
  PIDS=$(pstree -p "$PID" | grep -oP '\(\K[^\)]+')

  PIDS_DISPLAY=$(echo "$PIDS" | tr '\n' ',' | sed 's/,$//')
  debugPrint "PIDs: $PIDS_DISPLAY"

  # Prevent suspending itself
  local pid_of_script=$$
  if echo "$PIDS" | grep -q "$pid_of_script"; then
    echo "You are trying to suspend the hyprfreeze process."
    exit 1
  fi

  # Suspend or resume processes
  if [[ "$(ps -o state= "$PID")" == T ]]; then
    debugPrint "Resuming processes..."
    kill -CONT $PIDS 2>/dev/null && echo "Resumed $(ps -p "$PID" -o comm= 2>/dev/null) (PID $PID)" || exit 1
  else
    # Before suspending, release mouse capture for XWayland windows
    releaseMouseCapture
    
    debugPrint "Suspending processes..."
    kill -STOP $PIDS 2>/dev/null && echo "Suspended $(ps -p "$PID" -o comm= 2>/dev/null) (PID $PID)" || exit 1
  fi
}

function getPidByActive() {
  debugPrint "Getting PID by active window..."
  PID=$(hyprctl activewindow -j | jq '.pid')
  debugPrint "PID by active window: $PID"

  # Die if PID is not numeric (e.g. "null" if there is no active window)
  if ! [[ $PID == ?(-)+([[:digit:]]) ]]; then
    echo "Cannot freeze window with invalid PID $PID."
    exit 1
  fi
}

function getPidByPid() {
  debugPrint "Getting PID by PID: $1"
  # Check if process pid exists
  if ! ps -p "$1" &>/dev/null; then
    echo "Process ID $1 not found"
    exit 1
  fi

  PID=$1
}

function getPidByName() {
  debugPrint "Getting PID by name: $1"
  # Check if process name exists
  if ! pidof -x "$1" >/dev/null; then
    echo "Process name $1 not found"
    exit 1
  fi

  # Get last process if there are multiple
  PID=$(pidof "$1" | awk '{print $NF}')
  debugPrint "PID by name: $PID"
}

function getPidByProp() {
  debugPrint "Getting PID by prop..."
  if ! [ $(command -v hyprprop) ]; then
    echo "You need to install 'hyprprop' to use this feature. (https://github.com/vilari-mickopf/hyprprop)"
    exit 1
  fi

  PID=$(hyprprop | jq '.pid')
  debugPrint "PID by prop: $PID"
}

function sendNotification() {
  debugPrint "Sending notification..."
  local title
  title=$( [[ "$(ps -p "$PID" -o state=)" == T ]] &&
    echo "Suspended $(ps -p "$PID" -o comm= 2>/dev/null)" ||
    echo "Resumed $(ps -p "$PID" -o comm= 2>/dev/null)")

  local message="PID $PID"

  notify-send "${title}" "${message}" -t "$NOTIF_TIMEOUT" -a Hyprfreeze
}

function args() {
  # Track required flags
  local required_flag_count=0

  # Parse options
  local options="hap:n:rst:"
  local long_options="help,active,pid:,name:,prop,silent,notif-timeout:,dry-run,debug,no-xorg-workaround"
  local parsed_args
  parsed_args=$(getopt -o "$options" --long "$long_options" -n "$(basename "$0")" -- "$@")

  eval set -- "$parsed_args"
  while true; do
    case $1 in
      -h | --help)
        printHelp
        exit 0
        ;;
      -a | --active)
        ((required_flag_count++))
        FLAG_ACTIVE=true
        ;;
      -p | --pid)
        ((required_flag_count++))
        shift
        FLAG_PID="$1"
        ;;
      -n | --name)
        ((required_flag_count++))
        shift
        NAME_FLAG="$1"
        ;;
      -r | --prop)
        ((required_flag_count++))
        FLAG_PROP=true
        ;;
      -s | --silent)
        SILENT=1
        ;;
      -t | --notif-timeout)
        shift
        NOTIF_TIMEOUT="$1"
        ;;
      --dry-run)
        DRYRUN=1
        ;;
      --debug)
        DEBUG=1
        ;;
      --no-xorg-workaround)
        NO_XORG_WORKAROUND=1
        ;;
      --)
        shift # Skip -- argument
        break
        ;;
      *)
        exit 1
        ;;
    esac
    shift
  done

  # Check if more than one required flag is provided, or if none was provided
  if [ $required_flag_count -ne 1 ]; then
    printHelp
    exit 1
  fi
}

function main() {
  debugPrint "Starting main function..."
  # Get pid by a required flag
  if [ "$FLAG_ACTIVE" = true ]; then
    getPidByActive
  elif [ -n "$FLAG_PID" ]; then
    getPidByPid "$FLAG_PID"
  elif [ -n "$NAME_FLAG" ]; then
    getPidByName "$NAME_FLAG"
  elif [ "$FLAG_PROP" = true ]; then
    getPidByProp
  fi

  # Suspend or resume process
  toggleFreeze

  # Send notification if not silent
  if [ $SILENT -ne 1 ]; then sendNotification; fi

  debugPrint "End of main function."
}

SILENT=0
NOTIF_TIMEOUT=5000
DRYRUN=0
DEBUG=0
NO_XORG_WORKAROUND=0

args "$@"

main